/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Analizador2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,38],$V2=[1,39],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,33],$V7=[1,31],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,32],$Vd=[1,34],$Ve=[1,36],$Vf=[1,35],$Vg=[1,37],$Vh=[1,40],$Vi=[2,6,27,28,67,69,70,75,79,80,81,85,89,93,107,110,111,112,114,121,122],$Vj=[1,79],$Vk=[1,76],$Vl=[1,77],$Vm=[1,103],$Vn=[1,96],$Vo=[1,97],$Vp=[1,98],$Vq=[1,99],$Vr=[1,100],$Vs=[1,101],$Vt=[1,102],$Vu=[1,92],$Vv=[1,93],$Vw=[1,89],$Vx=[1,128],$Vy=[65,102],$Vz=[1,138],$VA=[1,139],$VB=[62,63,79,113],$VC=[55,56,57,58,59,60,62,63,79,113],$VD=[1,148],$VE=[1,147],$VF=[1,149],$VG=[1,150],$VH=[1,151],$VI=[9,46,47,48,49,50,52,55,56,57,58,59,60,62,63,65,79,80,100,104,113,114,118,124],$VJ=[9,65],$VK=[1,159],$VL=[1,160],$VM=[1,161],$VN=[1,162],$VO=[1,163],$VP=[1,164],$VQ=[1,178],$VR=[114,118],$VS=[1,186],$VT=[1,187],$VU=[1,188],$VV=[1,192],$VW=[9,52,65,68,88,89,91],$VX=[1,232],$VY=[9,88,89,91],$VZ=[1,240],$V_=[1,241],$V$=[65,104],$V01=[1,246],$V11=[9,46,47,52,55,56,57,58,59,60,62,63,65,79,80,100,104,113,114,118,124],$V21=[52,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"reiniciar":4,"instrucciones":5,"EOF":6,"instruccion":7,"DECLARACION_LIST":8,"PTCOMA":9,"DECLARACION":10,"MODIFICACION":11,"IMPRIMIR_VARIABLE":12,"CREAR_TABLA":13,"MODIFICACION_TABLA":14,"DELETE_TABLA":15,"AGREGAR_DATOS_COLUMNAS":16,"IMPRIMIR_TABLAS":17,"BEGIN_ENCAPSULADO":18,"ACTUALIZACION_COLUMNA":19,"TRUNCATE_TABLES":20,"DELETE_FILA":21,"IF_SENTENCIA":22,"PRINT_SENTENCIA":23,"WHILE_SENTENCIA":24,"FLUJO":25,"FOR_SENTENCIA":26,"BREAK":27,"CONTINUE":28,"TIPO":29,"INT":30,"VARCHAR":31,"DOUBLE":32,"BOOLEAN":33,"DATE":34,"NULL":35,"TIPOS_DATO":36,"ENTERO":37,"FECHA":38,"DECIMAL":39,"DATO_STRING":40,"TRUE":41,"FALSE":42,"ARROBA":43,"NOMBRE_DATO":44,"OPERACIONES_ARITMETICAS":45,"RESTA":46,"SUMA":47,"MULTI":48,"DIVI":49,"MODUL":50,"PAR_IZQ":51,"PAR_DER":52,"CAST_EXPRESSION":53,"RELACIONALES":54,"IGUAL":55,"DIFERENTE":56,"MENOR_O_IGUAL":57,"MAYOR_O_IGUAL":58,"MENOR":59,"MAYOR":60,"RELACIONALES_CON_LOGICAS":61,"AND":62,"OR":63,"NOT":64,"COMA":65,"DECLARACION2":66,"DECLARE":67,"DEFAULT":68,"SET":69,"SELECT":70,"LOWER":71,"UPPER":72,"ROUND":73,"LEN":74,"TRUNCATE":75,"TYPEOF":76,"CASE_SENTENCIA":77,"CASE_BUSQUEDA_SENTENCIA":78,"BEGIN":79,"END":80,"CREATE":81,"TABLE":82,"TABLA_ATRIBUTOS":83,"ATRIBUTO_TABLA":84,"ALTER":85,"ACCIONES_MODIFICAR":86,"ACCION_MODIFICAR":87,"ADD":88,"DROP":89,"COLUMN":90,"RENAME":91,"TO":92,"INSERT":93,"INTO":94,"NOMBRES_COLUMNAS":95,"VALUES":96,"VALORES_COLUMNAS":97,"NOMBRE_COLUMNAS":98,"CAST":99,"AS":100,"VALORE_COLUMNAS":101,"FROM":102,"ATRIBUTOS_TABLAS":103,"WHERE":104,"CONDICION":105,"ATRIBUTO_TABLAS":106,"UPDATE":107,"COLUMNAS_ATRI":108,"COLUMNA_ATRI":109,"DELETE":110,"PRINT":111,"IF":112,"THEN":113,"ELSE":114,"CASE":115,"MULTI_CASE":116,"MULT_CASE":117,"WHEN":118,"MULTI_CASE_BUSQUEDA":119,"MULT_CASE_BUSQUEDA":120,"WHILE":121,"FOR":122,"IN":123,"DOSPTS":124,"LOOP":125,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"PTCOMA",27:"BREAK",28:"CONTINUE",30:"INT",31:"VARCHAR",32:"DOUBLE",33:"BOOLEAN",34:"DATE",35:"NULL",37:"ENTERO",38:"FECHA",39:"DECIMAL",40:"DATO_STRING",41:"TRUE",42:"FALSE",43:"ARROBA",44:"NOMBRE_DATO",46:"RESTA",47:"SUMA",48:"MULTI",49:"DIVI",50:"MODUL",51:"PAR_IZQ",52:"PAR_DER",55:"IGUAL",56:"DIFERENTE",57:"MENOR_O_IGUAL",58:"MAYOR_O_IGUAL",59:"MENOR",60:"MAYOR",62:"AND",63:"OR",64:"NOT",65:"COMA",67:"DECLARE",68:"DEFAULT",69:"SET",70:"SELECT",71:"LOWER",72:"UPPER",73:"ROUND",74:"LEN",75:"TRUNCATE",76:"TYPEOF",79:"BEGIN",80:"END",81:"CREATE",82:"TABLE",85:"ALTER",88:"ADD",89:"DROP",90:"COLUMN",91:"RENAME",92:"TO",93:"INSERT",94:"INTO",96:"VALUES",99:"CAST",100:"AS",102:"FROM",104:"WHERE",107:"UPDATE",110:"DELETE",111:"PRINT",112:"IF",113:"THEN",114:"ELSE",115:"CASE",118:"WHEN",121:"WHILE",122:"FOR",123:"IN",124:"DOSPTS",125:"LOOP"},
productions_: [0,[3,3],[4,0],[5,2],[5,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,1],[25,1],[25,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,2],[36,1],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,1],[45,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,1],[61,3],[61,3],[61,2],[61,1],[8,3],[8,1],[10,6],[10,4],[66,5],[66,3],[11,5],[12,3],[12,2],[12,5],[12,5],[12,7],[12,5],[12,7],[12,5],[12,2],[12,2],[18,3],[13,6],[83,3],[83,1],[84,2],[14,4],[86,2],[86,1],[87,3],[87,3],[87,3],[87,5],[15,3],[16,10],[95,3],[95,1],[98,1],[98,6],[97,3],[97,1],[101,1],[17,4],[17,4],[17,6],[17,6],[103,3],[103,1],[106,1],[105,3],[105,3],[105,3],[105,3],[105,3],[105,3],[105,1],[19,6],[108,3],[108,1],[109,3],[20,3],[21,5],[53,6],[23,2],[23,2],[23,2],[22,6],[22,8],[77,8],[77,8],[77,6],[116,2],[116,1],[117,4],[78,7],[78,5],[119,2],[119,1],[120,4],[24,5],[26,11],[26,10]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
;return [$$[$0-1],Tabla_de_Errores];
break;
case 2:
Tabla_de_Errores.reiniciar()
break;
case 3: case 127: case 132:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1]
break;
case 4: case 61: case 103: case 114: case 128: case 133:
this.$ = [$$[$0]]
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 46:
this.$ = $$[$0-1]
break;
case 23:
Tabla_de_Errores.insertar("Error Sintactico",`Se Esperaba Este Token:`,yytext ,this._$.first_line,this._$.first_column+1)
break;
case 24:
this.$ = new Flujo.Flujo("break",_$[$0].first_line,_$[$0].first_column)
break;
case 25:
this.$ = new Flujo.Flujo("continue",_$[$0].first_line,_$[$0].first_column)
break;
case 26:
this.$ = "int"
break;
case 27:
this.$ = "string"
break;
case 28:
this.$ = "double"
break;
case 29:
this.$ = "boolean"
break;
case 30:
this.$ = "date"
break;
case 31:
this.$ = "null"
break;
case 32:
if($$[$0] === "0"){};this.$ = parseInt($$[$0], 10)
break;
case 33: case 35: case 47: case 48: case 55: case 59: case 104: case 111:
this.$ = $$[$0]
break;
case 34:
this.$ = parseFloat($$[$0])
break;
case 36:
this.$ = true;
break;
case 37:
this.$ = false;
break;
case 38:
this.$ = new BusquedaVariableExpre.BusquedaVariableExpre($$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 39:
this.$ = null
break;
case 40:
this.$ = new AritmeticosExpression.AritmeticosExpression("UMENOS",$$[$0],-1)
break;
case 41:
this.$ =  new AritmeticosExpression.AritmeticosExpression("+",$$[$0-2],$$[$0])
break;
case 42:
this.$ =  new AritmeticosExpression.AritmeticosExpression("-",$$[$0-2],$$[$0])
break;
case 43:
this.$ =  new AritmeticosExpression.AritmeticosExpression("*",$$[$0-2],$$[$0])
break;
case 44:
this.$ = new AritmeticosExpression.AritmeticosExpression("/",$$[$0-2],$$[$0])
break;
case 45:
this.$ = new AritmeticosExpression.AritmeticosExpression("%",$$[$0-2],$$[$0])
break;
case 49:
this.$ = new RelacionalesExpression.RelacionalesExpression("normal","=",$$[$0-2],$$[$0])
break;
case 50:
this.$ = new RelacionalesExpression.RelacionalesExpression("normal","!=",$$[$0-2],$$[$0])
break;
case 51:
this.$ = new RelacionalesExpression.RelacionalesExpression("normal","<=",$$[$0-2],$$[$0])
break;
case 52:
this.$ = new RelacionalesExpression.RelacionalesExpression("normal",">=",$$[$0-2],$$[$0])
break;
case 53:
this.$ = new RelacionalesExpression.RelacionalesExpression("normal","<",$$[$0-2],$$[$0])
break;
case 54:
this.$ = new RelacionalesExpression.RelacionalesExpression("normal",">",$$[$0-2],$$[$0])
break;
case 56:
this.$ = new LogicalExpression.LogicalExpression("and",$$[$0-2],$$[$0])
break;
case 57:
this.$ = new LogicalExpression.LogicalExpression("or",$$[$0-2],$$[$0])
break;
case 58:
this.$ = new LogicalExpression.LogicalExpression("not",$$[$0],null)
break;
case 60:
$$[$0-2].push($$[$0]);this.$ = new DeclareListExpression.DeclareListExpression($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 62:
this.$ = new DeclareExpression.DeclareExpression($$[$0-3],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 63:
this.$ = new DeclareExpression.DeclareExpression($$[$0-1],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 64:
this.$ = new DeclareExpression.DeclareExpression($$[$0-3],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 65:
this.$ = new DeclareExpression.DeclareExpression($$[$0-1],$$[$0],null,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 66:
this.$ = new SetExpression.SetExpression($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 67:
this.$ = new SelectExpression.SelectExpression($$[$0],"","variable",_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 68:
this.$ = new SelectExpression.SelectExpression($$[$0],"","",_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 69:
this.$ = new SelectExpression.SelectExpression($$[$0-1],"","lower",_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 70:
this.$ = new SelectExpression.SelectExpression($$[$0-1],"","upper",_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 71:
this.$ = new SelectExpression.SelectExpression($$[$0-3],$$[$0-1],"round",_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 72:
this.$ = new SelectExpression.SelectExpression($$[$0-1],"","len",_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 73:
this.$ = new SelectExpression.SelectExpression($$[$0-3],$$[$0-1],"truncate",_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 74:
this.$ = new SelectExpression.SelectExpression($$[$0-1],"","typeof",_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 75: case 76:
this.$ = new SelectExpression.SelectExpression($$[$0],"","CASE",_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 77:
this.$ = new BloqueExpression.BloqueExpression($$[$0-1],[$$[$0-2],$$[$0]],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 78:
this.$ =  new TableExpression.TableExpression($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 79: case 91: case 95:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 80: case 84: case 92: case 96:
this.$ = [$$[$0]];
break;
case 81:
this.$ = new columnsExpression.columnsExpression($$[$0-1],$$[$0])
break;
case 82:
this.$ = new ModifyTableExpression.ModifyTableExpression($$[$0-1],$$[$0])
break;
case 83:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 85:
this.$ = new ModifyExpression.ModifyExpression($$[$0-1],null,"add",$$[$0])
break;
case 86:
this.$ = new ModifyExpression.ModifyExpression($$[$0],null,"drop",null)
break;
case 87:
this.$ = new ModifyExpression.ModifyExpression($$[$0],null,"rename_table",null)
break;
case 88:
this.$ = new ModifyExpression.ModifyExpression($$[$0-2],$$[$0],"rename_column",null)
break;
case 89:
this.$ = new DeleteTableExpression.DeleteTableExpression($$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 90:
this.$ = new InsertColumnExpre.InsertColumnExpre($$[$0-7],$$[$0-5],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column)
break;
case 93: case 97:
this.$ = $$[$0];
break;
case 94:
this.$ = $$[$0-3];
break;
case 98:
this.$ = new SelectTablesExpression.SelectTablesExpression($$[$0],"Todo",null,null);
break;
case 99:
this.$ = new SelectTablesExpression.SelectTablesExpression($$[$0],"Columnas",$$[$0-2],null);
break;
case 100:
this.$ = new SelectTablesExpression.SelectTablesExpression($$[$0-2],"Todo_Where",null,$$[$0]);
break;
case 101:
this.$ = new SelectTablesExpression.SelectTablesExpression($$[$0-2],"Columnas_Where",$$[$0-4],$$[$0]);
break;
case 102: case 113:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2]
break;
case 105:
this.$ = new RelacionalesExpression.RelacionalesExpression("Where","=",$$[$0-2],$$[$0])
break;
case 106:
this.$ = new RelacionalesExpression.RelacionalesExpression("Where","!=",$$[$0-2],$$[$0])
break;
case 107:
this.$ = new RelacionalesExpression.RelacionalesExpression("Where","<=",$$[$0-2],$$[$0])
break;
case 108:
this.$ = new RelacionalesExpression.RelacionalesExpression("Where",">=",$$[$0-2],$$[$0])
break;
case 109:
this.$ = new RelacionalesExpression.RelacionalesExpression("Where","<",$$[$0-2],$$[$0])
break;
case 110:
this.$ = new RelacionalesExpression.RelacionalesExpression("Where",">",$$[$0-2],$$[$0])
break;
case 112:
this.$ = new UpdateTableExpression.UpdateTableExpression($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 115:
this.$ = new UpdateColumnsExpre.UpdateColumnsExpre($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 116:
this.$ = new TruncateTableExpre.TruncateTableExpre($$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 117:
this.$ = new DeleteTableExpression2.DeleteTableExpression2($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 118:
this.$ = new Cast.Cast($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 119:
this.$ = new Print.Print($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 120: case 121:
this.$ = new Print.Print($$[$0],_$[$0-1].first_line,_$[$0-1].first_column) 
break;
case 122:
this.$ = new If.If($$[$0-4],"SOLO",$$[$0-1],null,_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 123:
this.$ = new If.If($$[$0-6],"",$$[$0-4],$$[$0-2],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 124:
this.$ = new Case.Case($$[$0-6],new BusquedaVariableExpre.BusquedaVariableExpre($$[$0-6],null,_$[$0-7].first_line,_$[$0-7].first_column),$$[$0-5],$$[$0-3],$$[$0],"",_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 125:
this.$ = new Case.Case($$[$0-6],$$[$0-6],$$[$0-5],$$[$0-3],$$[$0],"",_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 126:
this.$ = new Case.Case($$[$0-4],new BusquedaVariableExpre.BusquedaVariableExpre($$[$0-4],null,_$[$0-5].first_line,_$[$0-5].first_column),$$[$0-3],$$[$0-1],"","",_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 129: case 134:
 this.$ = new CaseAux.CaseAux($$[$0-2],"",$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 130:
this.$ = new Case.Case("","",$$[$0-5],$$[$0-3],$$[$0],"BUSCANDO",_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 131:
this.$ = new Case.Case("","",$$[$0-3],$$[$0-1],"","BUSCANDO",_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 135:
this.$ = new While.While($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 136:
this.$ = new For.For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column)
break;
case 137:
this.$ = new For.For($$[$0-7],$$[$0-5],$$[$0-3],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column)
break;
}
},
table: [o([2,27,28,67,69,70,75,79,81,85,89,93,107,110,111,112,121,122],[2,2],{3:1,4:2}),{1:[3]},{2:$V0,5:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{2:$V0,6:[1,41],7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},o($Vi,[2,4]),{9:[1,43],65:[1,44]},{9:[1,45],65:[2,61]},{9:[1,46]},{9:[1,47]},{9:[1,48]},{9:[1,49]},{9:[1,50]},{9:[1,51]},{9:[1,52]},{9:[1,53]},{9:[1,54]},{9:[1,55]},{9:[1,56]},{9:[1,57]},{9:[1,58]},{9:[1,59]},{9:[1,60]},{9:[1,61]},o($Vi,[2,23]),{43:[1,62]},{43:[1,63]},{43:[1,64],44:$Vj,48:[1,74],53:65,71:[1,66],72:[1,67],73:[1,68],74:[1,69],75:[1,70],76:[1,71],77:72,78:73,99:$Vk,103:75,106:78,115:$Vl},{82:[1,80]},{82:[1,81]},{82:[1,82]},{94:[1,83]},{2:$V0,5:84,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{44:[1,85]},{82:[1,86]},{102:[1,87]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:90,61:88,64:$Vw,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:104,46:$Vu,51:$Vv,53:95,77:105,78:106,99:$Vk,115:$Vl},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:90,61:107,64:$Vw,99:$Vk},{9:[2,24]},{9:[2,25]},{43:[1,108]},{1:[2,1]},o($Vi,[2,3]),o($Vi,[2,5]),{43:[1,110],66:109},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{44:[1,111]},{44:[1,112]},{44:[1,113]},{9:[2,68]},{51:[1,114]},{51:[1,115]},{51:[1,116]},{51:[1,117]},{51:[1,118]},{51:[1,119]},{9:[2,75]},{9:[2,76]},{102:[1,120]},{65:[1,122],102:[1,121]},{51:[1,123]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:[1,124],45:125,46:$Vu,51:$Vv,53:95,99:$Vk,118:$Vx,119:126,120:127},o($Vy,[2,103]),o($Vy,[2,104]),{44:[1,129]},{44:[1,130]},{44:[1,131]},{44:[1,132]},{2:$V0,7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,80:[1,133],81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{69:[1,134]},{44:[1,135]},{44:[1,136]},{62:$Vz,63:$VA,113:[1,137]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:90,61:140,64:$Vw,99:$Vk},o($VB,[2,59],{55:[1,141],56:[1,142],57:[1,143],58:[1,144],59:[1,145],60:[1,146]}),o($VC,[2,55],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:152,46:$Vu,51:$Vv,53:95,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:153,46:$Vu,51:$Vv,53:95,99:$Vk},o($VI,[2,47]),o($VI,[2,48]),o($VI,[2,32]),o($VI,[2,33]),o($VI,[2,34]),o($VI,[2,35]),o($VI,[2,36]),o($VI,[2,37]),{44:[1,154]},o($VI,[2,39]),{9:[2,119],46:$VD,47:$VE,48:$VF,49:$VG,50:$VH},{9:[2,120]},{9:[2,121]},{62:$Vz,63:$VA,79:[1,155]},{44:[1,156]},o($VJ,[2,60]),{44:[1,157]},{29:158,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP},{55:[1,165]},{9:[2,67]},{35:$Vm,36:166,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{35:$Vm,36:167,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{35:$Vm,36:168,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{35:$Vm,36:169,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{35:$Vm,36:170,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{35:$Vm,36:171,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{44:[1,172]},{44:[1,173]},{44:$Vj,106:174},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:175,46:$Vu,51:$Vv,53:95,99:$Vk},{116:176,117:177,118:$VQ},{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,116:179,117:177,118:$VQ},{114:[1,180],118:$Vx,120:181},o($VR,[2,133]),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:90,61:182,64:$Vw,99:$Vk},{51:[1,183]},{86:184,87:185,88:$VS,89:$VT,91:$VU},{9:[2,89]},{51:[1,189]},{9:[2,77]},{44:$VV,108:190,109:191},{9:[2,116]},{104:[1,193]},{2:$V0,5:195,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:[1,194],81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:90,61:196,64:$Vw,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:90,61:197,64:$Vw,99:$Vk},o($VB,[2,58]),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:198,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:199,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:200,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:201,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:202,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:91,46:$Vu,51:$Vv,53:95,54:203,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:204,46:$Vu,51:$Vv,53:95,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:205,46:$Vu,51:$Vv,53:95,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:206,46:$Vu,51:$Vv,53:95,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:207,46:$Vu,51:$Vv,53:95,99:$Vk},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:208,46:$Vu,51:$Vv,53:95,99:$Vk},o($VI,[2,40]),{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,52:[1,209]},o($VI,[2,38]),{2:$V0,5:210,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{123:[1,211]},{29:212,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP},o($VJ,[2,63],{68:[1,213]}),o($VW,[2,26]),o($VW,[2,27]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31]),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:214,46:$Vu,51:$Vv,53:95,99:$Vk},{52:[1,215]},{52:[1,216]},{65:[1,217]},{52:[1,218]},{65:[1,219]},{52:[1,220]},{9:[2,98],104:[1,221]},{9:[2,99],104:[1,222]},o($Vy,[2,102]),{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,100:[1,223]},{114:[1,224],117:225,118:$VQ},o($VR,[2,128]),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:226,46:$Vu,51:$Vv,53:95,99:$Vk},{114:[1,227],117:225,118:$VQ},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:228,46:$Vu,51:$Vv,53:95,99:$Vk},o($VR,[2,132]),{62:$Vz,63:$VA,113:[1,229]},{44:$VX,83:230,84:231},{9:[2,82],87:233,88:$VS,89:$VT,91:$VU},o($VY,[2,84]),{44:[1,234]},{90:[1,235]},{90:[1,237],92:[1,236]},{44:$VZ,95:238,98:239,99:$V_},{65:[1,243],104:[1,242]},o($V$,[2,114]),{55:[1,244]},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:245},{2:$V0,5:248,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{2:$V0,7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,114:[1,249],121:$Vg,122:$Vh},o($VB,[2,56]),o([63,79,113],[2,57],{62:$Vz}),o($VC,[2,49]),o($VC,[2,50]),o($VC,[2,51]),o($VC,[2,52]),o($VC,[2,53]),o($VC,[2,54]),o($V11,[2,41],{48:$VF,49:$VG,50:$VH}),o($V11,[2,42],{48:$VF,49:$VG,50:$VH}),o($VI,[2,43]),o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46]),{2:$V0,7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,80:[1,250],81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:251,46:$Vu,51:$Vv,53:95,99:$Vk},o($VJ,[2,65],{68:[1,252]}),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:253,46:$Vu,51:$Vv,53:95,99:$Vk},{9:[2,66],46:$VD,47:$VE,48:$VF,49:$VG,50:$VH},{9:[2,69]},{9:[2,70]},{35:$Vm,36:254,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{9:[2,72]},{35:$Vm,36:255,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{9:[2,74]},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:256},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:257},{29:258,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:259,46:$Vu,51:$Vv,53:95,99:$Vk},o($VR,[2,127]),{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,113:[1,260]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:261,46:$Vu,51:$Vv,53:95,99:$Vk},{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,80:[1,262]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:263,46:$Vu,51:$Vv,53:95,99:$Vk},{52:[1,264],65:[1,265]},o($V21,[2,80]),{29:266,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP},o($VY,[2,83]),{29:267,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP},{44:[1,268]},{44:[1,269]},{44:[1,270]},{52:[1,271],65:[1,272]},o($V21,[2,92]),o($V21,[2,93]),{51:[1,273]},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:274},{44:$VV,109:275},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:276,46:$Vu,51:$Vv,53:95,99:$Vk},{9:[2,117]},{55:[1,277],56:[1,278],57:[1,279],58:[1,280],59:[1,281],60:[1,282]},{9:[2,111]},{2:$V0,7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,80:[1,283],81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{2:$V0,5:284,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{9:[2,135]},{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,124:[1,285]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:286,46:$Vu,51:$Vv,53:95,99:$Vk},o($VJ,[2,62],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{52:[1,287]},{52:[1,288]},{9:[2,100]},{9:[2,101]},{52:[1,289]},{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,80:[1,290]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:291,46:$Vu,51:$Vv,53:95,99:$Vk},{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,80:[1,292]},{9:[2,131],100:[1,293]},o($VR,[2,134],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{9:[2,78]},{44:$VX,84:294},o($V21,[2,81]),o($VY,[2,85]),o($VY,[2,86]),o($VY,[2,87]),{92:[1,295]},{96:[1,296]},{44:$VZ,98:297,99:$V_},{44:[1,298]},{9:[2,112]},o($V$,[2,113]),o($V$,[2,115],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:299},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:300},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:301},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:302},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:303},{35:$Vm,36:247,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,44:$V01,105:304},{9:[2,122]},{2:$V0,7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,80:[1,305],81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:306,46:$Vu,51:$Vv,53:95,99:$Vk},o($VJ,[2,64],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{9:[2,71]},{9:[2,73]},o($VI,[2,118]),{9:[2,126],100:[1,307]},o($VR,[2,129],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{100:[1,308]},{44:[1,309]},o($V21,[2,79]),{44:[1,310]},{51:[1,311]},o($V21,[2,91]),{100:[1,312]},{9:[2,105]},{9:[2,106]},{9:[2,107]},{9:[2,108]},{9:[2,109]},{9:[2,110]},{112:[1,313]},{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH,79:[1,314]},{44:[1,315]},{44:[1,316]},{9:[2,130]},o($VY,[2,88]),{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:319,46:$Vu,51:$Vv,53:95,97:317,99:$Vk,101:318},{35:$Vm,36:320,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt},{9:[2,123]},{2:$V0,5:321,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{9:[2,124]},{9:[2,125]},{52:[1,322],65:[1,323]},o($V21,[2,96]),o($V21,[2,97],{46:$VD,47:$VE,48:$VF,49:$VG,50:$VH}),{52:[1,324]},{2:$V0,7:42,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V1,28:$V2,67:$V3,69:$V4,70:$V5,75:$V6,79:$V7,80:[1,325],81:$V8,85:$V9,89:$Va,93:$Vb,107:$Vc,110:$Vd,111:$Ve,112:$Vf,121:$Vg,122:$Vh},{9:[2,90]},{35:$Vm,36:94,37:$Vn,38:$Vo,39:$Vp,40:$Vq,41:$Vr,42:$Vs,43:$Vt,45:319,46:$Vu,51:$Vv,53:95,99:$Vk,101:326},o($V21,[2,94]),{9:[2,137],125:[1,327]},o($V21,[2,95]),{9:[2,136]}],
defaultActions: {38:[2,24],39:[2,25],41:[2,1],65:[2,68],72:[2,75],73:[2,76],105:[2,120],106:[2,121],113:[2,67],131:[2,89],133:[2,77],135:[2,116],215:[2,69],216:[2,70],218:[2,72],220:[2,74],245:[2,117],247:[2,111],250:[2,135],256:[2,100],257:[2,101],264:[2,78],274:[2,112],283:[2,122],287:[2,71],288:[2,73],299:[2,105],300:[2,106],301:[2,107],302:[2,108],303:[2,109],304:[2,110],309:[2,130],313:[2,123],315:[2,124],316:[2,125],322:[2,90],327:[2,136]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TablaErrores = require('./Analizador/Error/TablaErrores');
    
    const DeclareListExpression = require('./Analizador/NonTerminal/DeclareListExpression');
    const DeclareExpression = require('./Analizador/NonTerminal/DeclareExpression');
    const SelectExpression = require('./Analizador/NonTerminal/SelectExpression');
    const SetExpression = require('./Analizador/NonTerminal/SetExpression');
    const TableExpression = require('./Analizador/NonTerminal/TableExpression');
    const columnsExpression = require('./Analizador/Terminal/columnsExpression');
    const ModifyTableExpression = require('./Analizador/NonTerminal/ModifyTableExpression');
    const ModifyExpression = require('./Analizador/Terminal/ModifyExpression');
    const DeleteTableExpression = require('./Analizador/NonTerminal/DeleteTableExpression');
    const InsertColumnExpre = require('./Analizador/NonTerminal/InsertColumnExpre');
    const SelectTablesExpression = require('./Analizador/NonTerminal/SelectTablesExpression');
    const RelacionalesExpression = require('./Analizador/Terminal/RelacionalesExpression');
    const AritmeticosExpression = require('./Analizador/Terminal/AritmeticosExpression');
    const BusquedaVariableExpre = require('./Analizador/NonTerminal/BusquedaVariableExpre');
    const BloqueExpression = require('./Analizador/NonTerminal/BloqueExpression');
    const UpdateTableExpression = require('./Analizador/NonTerminal/UpdateTableExpression');
    const UpdateColumnsExpre = require('./Analizador/Terminal/UpdateColumnsExpre');
    const TruncateTableExpre = require('./Analizador/NonTerminal/TruncateTableExpre');
    const LogicalExpression = require('./Analizador/Terminal/LogicalExpression');
    // Importaciones para las tablas
    const DeleteTableExpression2 = require('./Analizador/NonTerminal/TableExpression/DeleteTableExpression2');
    //Importaciones Sentecias de control
    const If = require('./Analizador/NonTerminal/SentenciasDeControl/If');
    const Case = require('./Analizador/NonTerminal/SentenciasDeControl/Case');
    const CaseAux = require('./Analizador/NonTerminal/SentenciasDeControl/CaseAux');
    const Print = require('./Analizador/NonTerminal/FuncionesNativas/Print');
    const Cast = require('./Analizador/NonTerminal/FuncionesNativas/Cast');
    //Importaciones de Sentecias Ciclicas
    const While = require('./Analizador/NonTerminal/SentenciasCiclicas/While');
    const For = require('./Analizador/NonTerminal/SentenciasCiclicas/For');
    //Importaciones Flujo
    const Flujo = require("./Analizador/Terminal/Flujo/Flujo")
    

    const Tabla_de_Errores = new TablaErrores.Tabla()
    Tabla_de_Errores.reiniciar()
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return "INT";
break;
case 3:return "DOUBLE";
break;
case 4:return "DATE";
break;
case 5:return "VARCHAR";
break;
case 6:return "BOOLEAN";
break;
case 7:return "DECLARE";
break;
case 8:return "DEFAULT";
break;
case 9:return "BEGIN";
break;
case 10:return  "END";
break;
case 11:return "CREATE";
break;
case 12:return "TABLE";
break;
case 13:return "ALTER";
break;
case 14:return "ADD";
break;
case 15:return "DROP";
break;
case 16:return "COLUMN";
break;
case 17:return "RENAME";
break;
case 18:return "TO";
break;
case 19:return "INSERT";
break;
case 20:return "INTO";
break;
case 21:return "VALUES";
break;
case 22:return "FROM";
break;
case 23:return "WHERE";
break;
case 24:return "UPDATE";
break;
case 25:return "TRUNCATE";
break;
case 26:return "DELETE";
break;
case 27:return "PRINT";
break;
case 28:return "CAST";
break;
case 29:return "AS";
break;
case 30:return "LOWER";
break;
case 31:return "UPPER";
break;
case 32:return "ROUND";
break;
case 33:return "LEN";
break;
case 34:return "TYPEOF";
break;
case 35:return "NULL";
break;
case 36:return "WHILE";
break;
case 37:return "BREAK";
break;
case 38:return "CONTINUE";
break;
case 39:return "FOR";
break;
case 40:return "IN";
break;
case 41:return "LOOP";
break;
case 42:return "CASE";
break;
case 43:return "WHEN";
break;
case 44:return "IF";
break;
case 45:return "THEN";
break;
case 46:return "ELSE";
break;
case 47:return "AND";
break;
case 48:return "OR";
break;
case 49:return "NOT";
break;
case 50:return "SELECT";
break;
case 51:return "SET";
break;
case 52:return "TRUE";
break;
case 53:return "FALSE";
break;
case 54:return "PAR_IZQ";
break;
case 55:return "PAR_DER";
break;
case 56:return "PTCOMA";
break;
case 57:return "ARROBA";
break;
case 58:return "COMA";
break;
case 59:return "SUMA";
break;
case 60:return "RESTA";
break;
case 61:return "MULTI";
break;
case 62:return "DIVI";
break;
case 63:return "MODUL";
break;
case 64:return "DOBLE_IGUAL";
break;
case 65:return "DIFERENTE";
break;
case 66:return "MENOR_O_IGUAL";
break;
case 67:return "MAYOR_O_IGUAL";
break;
case 68:return "MENOR";
break;
case 69:return "MAYOR";
break;
case 70:return "IGUAL";
break;
case 71:return "DOSPTS"
break;
case 72:
break;
case 73:
break;
case 74:return "FECHA";
break;
case 75:return 39;
break;
case 76:return 37;
break;
case 77:yy_.yytext = yy_.yytext.toLowerCase(); return 44; 
break;
case 78: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 40; 
break;
case 79:return 6;
break;
case 80:Tabla_de_Errores.insertar("Error Lexico","Este token no pertenece al lenguaje",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1)
break;
}
},
rules: [/^(?:--.*)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:boolean\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:print\b)/i,/^(?:cast\b)/i,/^(?:as\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:null\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:loop\b)/i,/^(?:case\b)/i,/^(?:when\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:select\b)/i,/^(?:set\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:@)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\.\.)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:"[0-9]{4}[0-9]{2}[0-9]{2}")/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[0-9]+\b)/i,/^(?:[-_a-zA-Z][-_a-zA-Z0-9]*)/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Analizador2;
exports.Parser = Analizador2.Parser;
exports.parse = function () { return Analizador2.parse.apply(Analizador2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}